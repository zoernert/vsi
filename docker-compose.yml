version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: vsi-postgres
    environment:
      POSTGRES_DB: vsi_vector_store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - vsi-network

  redis:
    image: redis:7-alpine
    container_name: vsi-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - vsi-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: vsi-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - vsi-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  vsi-app:
    build: .
    container_name: vsi-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vsi_vector_store
      - DB_USER=postgres
      - DB_PASSWORD=password
      - QDRANT_URL=http://qdrant:6333
      - JWT_SECRET=your_production_jwt_secret
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/auth/debug/users"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - vsi-network

  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://vsi_user:vsi_password@postgres:5432/vsi_dev
      - JWT_SECRET=development-jwt-secret-change-in-production-min-32-characters
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    command: npm run dev

  postgres_test:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=vsi_test
      - POSTGRES_USER=vsi_user
      - POSTGRES_PASSWORD=vsi_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data

networks:
  vsi-network:
    driver: bridge

volumes:
  qdrant-data:
    driver: local
  vsi-uploads:
    driver: local
  vsi-userdata:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  postgres_data:
  postgres_test_data:
  qdrant_data:
